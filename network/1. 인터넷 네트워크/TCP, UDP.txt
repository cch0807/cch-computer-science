인터넷 프로토콜 스택의 4계층

애플리케이션 계층 - HTTP, FTP
전송 계층 - TCP, UDP
인터넷 계층 - IP
네트워크 인터페이스 계층

프로토콜 계층

애플리케이션 - 웹 브라우저, 네트워크 게임, 채팅 프로그램 (SOCKET 라이브러리)

OS - TCP, UDP, IP(Internet Protocol)

네트워크 인터페이스 - LAN 드라이버, LAN 장비

친구와 채팅을 한다고 가정할 때!

1. 프로그램이 Hello, World! 메시지 생성
2. SOCKET 라이브러리를 통해 전달
3. TCP 정보 생성, 메시지 데이터 포함
4. IP 패킷 생성, TCP 데이터 포함

IP 패킷 정보
출발지 IP, 목적지 IP, 기타....
전송 데이터 포함

패킷은 ?
패키지(수화물) 덩어리를 통하는 버킷(Bucket)이라는 단어의 합성

TCP/IP 패킷 정보
출발지 IP, 목적지 IP, 기타...

TCP 세그먼트
출발지 PORT, 목적지 PORT 전송제어, 순서, 검증 정보...

TCP 특징
전송 제어 프토토콜(Transmission Control Protocol)

연결지향 - TCP 3 way handshake(가상 연결)
상대방과 내가 연결이 됐는지 안됐는지 확인!
먼저 연결을 한다음에 메시지를 보냄!

데이터 전달 보증
메시지를 받았는지 못받았는지 알수있음

순서 보장

신뢰할 수 있는 프로토콜
현재는 대부분 TCP 사용

TCP 3 way handshake

connect, 연결 과정
1. SYN
2. SYN_ACK
3. ACK

SYN : 접속 요청
ACK : 요청 수락
참고: 3. ACK와 함께 데이터 전송 가능

데이터 전달 보증
TCP가 붙게되면 데이터 전송 시 서버에서 데이터를 잘 받았다고 보내줌
그렇게 되면 메시지가 잘 전달 되었는지 확인할 수 있음.

순서 보장
1. 패킷1, 패킷2, 패킷3 순서로 전송
2. 패킷1, 패킷3, 패킷2 순서로 도착
3. 패킷2부터 다시 보내야함!

UDP 특징
사용자 데이터그램 프로토콜(User Datagram Protocol)
하얀 도화지에 비유(기능이 거의 없음)
연결지향 - TCP 3 way handshake X
데이터 전달 보증 X
순서 보장 X
데이터 전달 및 순서가 보장되지 않지만, 단순하고 빠름

정리
IP와 거 의 같다. +PORT +체크섬(데이터가 제대로 맞는지 검증) 정도만 추가
애플리케이션에서 추가 작업 필요

TCP는 다좋은데 3 way handshake 하려면 시간 오래걸림.
데이터 양도 크고 전송 속도도 느림!
최적화하고 싶어도 할수 없을 때 UDP를 사용함.

최근에 관심을 받고있는것은 UDP!
시간이 지나면서 TCP 프로토콜이 거의 90퍼센트 점유.
심지어 영상을 보낼때도 TCP를 썼음.
최근에는 최적화